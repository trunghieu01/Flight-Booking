package com.microservices.CustomerService.controller;

import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.microservices.CustomerService.service.CustomerServices;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import io.github.resilience4j.timelimiter.annotation.TimeLimiter;

@RestController
@RequestMapping("/khachhang")
public class Controller {
	@Autowired
	private CustomerServices customerService;
	
	int attempt = 1;

	@GetMapping("/getAll")
	@CircuitBreaker(name = "userService", fallbackMethod = "getAllAvailableProducts")
//	@Retry(name = "userService", fallbackMethod = "getAllAvailableProducts")
	public String displayOrders() throws Exception {
		System.out.println("retry method called " + attempt);
		attempt++;
		if (attempt == 1 || attempt == 2 || attempt == 3 || attempt == 4 || attempt == 5 || attempt == 6) {
			throw new Exception("Next");
		}
		return "Hi: " + attempt;
	}

	public String getAllAvailableProducts(Exception e) {
		attempt = 1;
		return "Failled";
	}

	public CompletableFuture<String> getFallBack(Exception e) {
		return CompletableFuture.supplyAsync(() -> {
			try {
				return customerService.getAll();
			} catch (Throwable e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			return null;
		});
	}

	@RequestMapping("/showAll")
	@Retry(name = "userService", fallbackMethod = "getAllAvailableProducts")
	public String getAll() throws Exception {
		return customerService.getAll();
	}

	@RequestMapping("/new")
	@CircuitBreaker(name = "userService", fallbackMethod = "getFallBack")
	@TimeLimiter(name = "userService")
	public CompletableFuture<String> add(@RequestParam String maKH, String pass, String ten) {
		return CompletableFuture.supplyAsync(customerService::getAll());
	}

}
